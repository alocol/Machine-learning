mknn <- list(KNN = c(1, 5, 7, 11), ACCURACY = c(ACUknn1_1, ACUknn1_3, ACUknn1_5, ACUknn1_7, ACUknn1_11), SENSITIVITY= c(SEN1_1, SEN1_3, SEN1_5, SEN1_7, SEN1_11), SPECIFICITY = c(SPE1_1, SPE1_3, SPE1_5, SPE1_7, SPE1_11))
data.frame(mknn)
ACUknn1 <- predknn1 == data.test$class
tabla1 <- data.frame(prop.table(table(ACUknn1)))
ACUknn1_1 <- tabla1$Freq[2]
SEN1_1 <- sensitivity(data.test$class, predknn1)
SPE1_1 <- specificity(data.test$class, predknn1)
ACUknn3 <- predknn3 == data.test$class
tabla1_3 <- data.frame(prop.table(table(ACUknn3)))
ACUknn1_3 <- tabla1_3$Freq[2]
SEN1_3 <- sensitivity(data.test$class, predknn3)
SPE1_3 <- specificity(data.test$class, predknn3)
ACUknn5 <- predknn5 == data.test$class
tabla1_5 <- data.frame(prop.table(table(ACUknn5)))
ACUknn1_5 <- tabla1_5$Freq[2]
SEN1_5 <- sensitivity(data.test$class, predknn5)
SPE1_5 <- specificity(data.test$class, predknn5)
ACUknn7 <- predknn7 == data.test$class
tabla1_7 <- data.frame(prop.table(table(ACUknn7)))
ACUknn1_7 <- tabla1_7$Freq[2]
SEN1_7 <- sensitivity(data.test$class, predknn7)
SPE1_7 <- specificity(data.test$class, predknn7)
ACUknn11 <- predknn11 == data.test$class
tabla1_11 <- data.frame(prop.table(table(ACUknn11)))
ACUknn1_11 <- tabla1_11$Freq[2]
SEN1_11 <- sensitivity(data.test$class, predknn11)
SPE1_11 <- specificity(data.test$class, predknn11)
mknn <- list(KNN = c(1, 3, 5, 7, 11), ACCURACY = c(ACUknn1_1, ACUknn1_3, ACUknn1_5, ACUknn1_7, ACUknn1_11), SENSITIVITY= c(SEN1_1, SEN1_3, SEN1_5, SEN1_7, SEN1_11), SPECIFICITY = c(SPE1_1, SPE1_3, SPE1_5, SPE1_7, SPE1_11))
data.frame(mknn)
install.packages("e1071")
library(e1071)
modelnb <- naiveBayes(data.train[-9], data.train.l, laplace=0)
modelnb <- naiveBayes(data.train[-9], data.train.l, laplace=0)
modelnb
prednb <- predict(modelnb, data.test)
prednb <- predict(modelnb, data.test)
CrossTable(prednb, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace=1)
modelnb
prednb <- predict(modelnb, data.test)
CrossTable(prednb, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
prednb1 <- predict(modelnb1, data.test)
CrossTable(prednb1, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
ACUnb <- prednb == data.test$class
tabla2 <- data.frame(prop.table(table(ACUnb)))
ACUnb <- tabla2$Freq[2]
SEN2 <- sensitivity(data.test$class, prednb)
SPE2 <- specificity(data.test$class, prednb)
ACUnb <- prednb == data.test$class
tabla2 <- data.frame(prop.table(table(ACUnb)))
ACUnb <- tabla2$Freq[2]
SEN2 <- sensitivity(data.test$class, prednb)
SPE2 <- specificity(data.test$class, prednb)
ACUnb1 <- prednb1 == data.test$class
tabla2_1 <- data.frame(prop.table(table(ACUnb1)))
ACUnb1 <- tabla2_1$Freq[2]
SEN2_1 <- sensitivity(data.test$class, prednb1)
SPE2_1 <- specificity(data.test$class, prednb1)
mnb <- list(laplace = c(0, 1), ACCURACY = c(ACUnb, ACUnb1), SENSITIVITY= c(SEN2, SEN2_1), SPECIFICITY = c(SPE2, SPE2_1))
data.frame(mnb)
modelnb <- naiveBayes(data.train[-9], data.train.l, laplace=0)
modelnb
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace=1)
modelnb1
prednb <- predict(modelnb, data.test)
CrossTable(prednb, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
prednb1 <- predict(modelnb1, data.test)
CrossTable(prednb1, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
ACUnb <- prednb == data.test$class
tabla2 <- data.frame(prop.table(table(ACUnb)))
ACUnb <- tabla2$Freq[2]
SEN2 <- sensitivity(data.test$class, prednb)
SPE2 <- specificity(data.test$class, prednb)
ACUnb1 <- prednb1 == data.test$class
tabla2_1 <- data.frame(prop.table(table(ACUnb1)))
ACUnb1 <- tabla2_1$Freq[2]
SEN2_1 <- sensitivity(data.test$class, prednb1)
SPE2_1 <- specificity(data.test$class, prednb1)
mnb <- list(laplace = c(0, 1), ACCURACY = c(ACUnb, ACUnb1), SENSITIVITY= c(SEN2, SEN2_1), SPECIFICITY = c(SPE2, SPE2_1))
data.frame(mnb)
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace = a)
modelnb1
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace = 1)
modelnb1
prednb1 <- predict(modelnb1, data.test)
CrossTable(prednb1, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
modelnb <- naiveBayes(data.train[-9], data.train.l, laplace = 0)
modelnb
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace = 1)
modelnb1
modelnb <- naiveBayes(data.train[-9], data.train.l)
modelnb
prednb1 <- predict(modelnb1, data.test)
CrossTable(prednb1, data.test.l, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c('predicted', 'actual'))
modelsvm <- ksvm(class ~ ., data = data.train, kernel = "vanilladot")
library(kernlab)
modelsvm <- ksvm(class ~ ., data = data.train, kernel = "vanilladot")
modelsvm
predsvm <- predict(modelsvm, data.test)
predsvm <- predict(modelsvm, data.test)
table(predsvm, data.test$class)
modelsvm1 <- ksvm(class ~ ., data = data.train, kernel = 'rbfdot')
modelsvm1
predsvm1 <- predict(modelsvm1, data.test)
table(predsvm1, data.test$class)
ACU4 <- predsvm == data.test$class
tabla4 <- data.frame(prop.table(table(ACU4)))
ACU4 <- tabla4$Freq[2]
SEN4 <- sensitivity(data.test$class, predsvm)
SPE4 <- specificity(data.test$class, predsvm)
ACU4_1 <- predsvm1 == data.test$class
tabla4_1 <- data.frame(prop.table(table(ACU4_1)))
ACU4_1 <- tabla4_1$Freq[2]
SEN4_1 <- sensitivity(data.test$class, predsvm1)
SPE4_1 <- specificity(data.test$class, predsvm1)
msvm <- list(FUNCION = c(kernel, rbf), ACCURACY = c(ACU4, ACU4_1), SENSITIVITY= c(SEN4, SEN4_1), SPECIFICITY = c(SPE4, SPE4_1))
ACU4 <- predsvm == data.test$class
tabla4 <- data.frame(prop.table(table(ACU4)))
ACU4 <- tabla4$Freq[2]
SEN4 <- sensitivity(data.test$class, predsvm)
SPE4 <- specificity(data.test$class, predsvm)
ACU4_1 <- predsvm1 == data.test$class
tabla4_1 <- data.frame(prop.table(table(ACU4_1)))
ACU4_1 <- tabla4_1$Freq[2]
SEN4_1 <- sensitivity(data.test$class, predsvm1)
SPE4_1 <- specificity(data.test$class, predsvm1)
msvm <- list(FUNCION = c('kernel', 'rbf'), ACCURACY = c(ACU4, ACU4_1), SENSITIVITY= c(SEN4, SEN4_1), SPECIFICITY = c(SPE4, SPE4_1))
data.frame(msvm)
install.packages("neuralnet")
library(neuralnet)
modelann <- neuralnet(class ~ ., data = data.train_n)
data.train_n
data.trainnl <- cbind(data.train_n, data.train.l)
modelann <- neuralnet(class ~ ., data = data.trainnl)
data.trainnl
data.trainnl <- cbind(data.train_n, class = data.train.l)
data.trainnl
modelann <- neuralnet(class ~ ., data = data.trainnl)
plot(modelann)
install.packages("reticulate")
library(reticulate)
reticulate::repl_python()
import numpy as np
YY
Y
Y
N
no
install_miniconda()
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
install_miniconda()
knitr::opts_chunk$set(echo = FALSE, comment = NULL, cache = TRUE, fig.width = 7, fig.height = 7, fig_caption = TRUE)
reticulate::repl_python()
import numpy as np
reticulate::install_miniconda()
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
install.packages("greta",dependencies = TRUE)
install.packages("causact",dependencies = TRUE)
condaInstall = try(reticulat::install_miniconda())
condaInstall = try(reticulate::install_miniconda())
condaPath = try(reticulate::miniconda_path())
condaInstall = try(reticulate::install_miniconda())
condaPath = try(reticulate::miniconda_path())
library(miniconda)
np <- import("numpy")
reticulate::install_miniconda()
library(miniconda)
miniconda_path(C:\Users\Alicia Lozoya\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Anaconda3 (32-bit))
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
library(h2o)
h2o.init(nthreads = -1)
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
summary(diabetes)
write.txt(diabetes, "diabetesn")
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
summary(diabetes)
write.table(diabetes, "diabetesn")
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
write.table(diabetes_n, "diabetesn")
head(diabetes_n)
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind('diabetes_n', 'diabetes$class')
write.table(diabetes_n, "diabetesn")
head(diabetes_n)
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind(diabetes_n, diabetes$class)
write.table(diabetes_n, "diabetesn")
head(diabetes_n)
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind(diabetes_n, class = diabetes$class)
write.table(diabetes_n, "diabetesn")
head(diabetes_n)
knitr::opts_chunk$set(echo = TRUE)
diabetes <- read.table("./pima_indians_diabetis.txt", header = TRUE)
diabetes <- read.table("./pima_indians_diabetis.txt", header = TRUE)
diabetes$glucose[diabetes$glucose == 0] <- NA
diabetes$pressure[diabetes$pressure == 0] <- NA
diabetes$triceps[diabetes$triceps == 0] <- NA
diabetes$insulin[diabetes$insulin == 0] <- NA
diabetes$mass[diabetes$mass == 0] <- NA
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetesnn <- cbind(diabetes_n, class = diabetes$class)
write.table(diabetes_n, "diabetesn")
diabetes <- read.table("./pima_indians_diabetis.txt", header = TRUE)
diabetes$glucose[diabetes$glucose == 0] <- NA
diabetes$pressure[diabetes$pressure == 0] <- NA
diabetes$triceps[diabetes$triceps == 0] <- NA
diabetes$insulin[diabetes$insulin == 0] <- NA
diabetes$mass[diabetes$mass == 0] <- NA
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetesnn <- cbind(diabetes_n, class = diabetes$class)
write.table(diabetesnn, "diabetesnn")
knitr::opts_chunk$set(echo = FALSE, comment = NULL, cache = TRUE, fig.width = 7, fig.height = 7, fig_caption = TRUE)
library(knitr)
library(ggseqlogo)
library(class)
library(gmodels)
library(ROCR)
library(pROC)
library(ggplot2)
library(C50)
library(caret)
library(randomForest)
library(e1071)
library(kernlab)
# Working directory
setwd("C:\\Users\\Alicia Lozoya\\Desktop\\MASTER BIOINF\\Machine learning\\PEC4\\Machine-learning")
workingDir <- getwd()
diabetes <- read.table("./pima_indians_diabetis.txt", header = TRUE)
head(diabetes)
summary(diabetes)
head(sort(diabetes$glucose), 50)
diabetes$glucose[diabetes$glucose == 0] <- NA
diabetes$pressure[diabetes$pressure == 0] <- NA
diabetes$triceps[diabetes$triceps == 0] <- NA
diabetes$insulin[diabetes$insulin == 0] <- NA
diabetes$mass[diabetes$mass == 0] <- NA
diabetes$class <- factor(diabetes$class)
levels(diabetes$class) <- c("negativo", "positivo")
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
summary(diabetes)
ggplot(diabetes, aes(x=pregnant))+geom_histogram()
ggplot(diabetes, aes(x=glucose))+geom_density()
ggplot(diabetes, aes(x=pressure))+geom_density()
ggplot(diabetes, aes(x=triceps))+geom_density()
ggplot(diabetes, aes(x=insulin))+geom_density()
ggplot(diabetes, aes(x=age))+geom_histogram()
ggplot(diabetes, aes(x=mass))+geom_density()
ggplot(diabetes, aes(x=class, y= pedigree))+geom_boxplot()
set.seed(12345)
train<-sample(1:nrow(diabetes),round(0.67*nrow(diabetes)))
data.train <- diabetes[train,]
data.test <- diabetes[-train,]
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
head(diabetes_n)
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind(diabetes_n, class = diabetes$class)
head(diabetes_n)
data.train_n <- diabetes_n[train,]
data.test_n <- diabetes_n[-train,]
data.train.l <- diabetes[train, 9]
data.test.l <- diabetes[-train, 9]
predknn1 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=1)
for(i in 1:ncol(diabetes[-9])) {
diabetes[, i][is.na(diabetes[ , i])] <- mean(diabetes[ , i], na.rm=TRUE)
}
summary(diabetes)
set.seed(12345)
train<-sample(1:nrow(diabetes),round(0.67*nrow(diabetes)))
data.train <- diabetes[train,]
data.test <- diabetes[-train,]
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind(diabetes_n, class = diabetes$class)
head(diabetes_n)
data.train_n <- diabetes_n[train,]
data.test_n <- diabetes_n[-train,]
data.train.l <- diabetes_n[train, 9]
data.test.l <- diabetes_n[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
data.train_n <- diabetes_n[train, -9]
data.test_n <- diabetes_n[-train, -9]
data.train.l <- diabetes_n[train, 9]
data.test.l <- diabetes_n[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
predknn3 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=3)
predknn5 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=5)
predknn7 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=7)
predknn11 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=11)
CrossTable(x = data.test.l, y = predknn1, prop.chisq = FALSE)
confunsionMatrix(data.test.l, predknn1)
confusionMatrix(data.test.l, predknn1)
confusionMatrix(data.test.l$class, predknn1)
confusionMatrix(predknn1, data.test.l, positive = "positive")
data.train_n <- diabetes_n[train,]
data.test_n <- diabetes_n[-train,]
data.train.l <- diabetes_n[train, 9]
data.test.l <- diabetes_n[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
data.train_n <- diabetes_n[train,]
data.test_n <- diabetes_n[-train,]
data.train.l <- diabetes[train, 9]
data.test.l <- diabetes[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
set.seed(12345)
train<-sample(1:nrow(diabetes),round(0.67*nrow(diabetes)))
data.train_n <- diabetes_n[train,]
data.test_n <- diabetes_n[-train,]
data.train.l <- diabetes[train, 9]
data.test.l <- diabetes[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
set.seed(12345)
train<-sample(1:nrow(diabetes),round(0.67*nrow(diabetes)))
data.train_n <- diabetes_n[train, -9]
data.test_n <- diabetes_n[-train,-9]
data.train.l <- diabetes[train, 9]
data.test.l <- diabetes[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
predknn3 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=3)
predknn5 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=5)
predknn7 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=7)
predknn11 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=11)
CrossTable(x = data.test.l, y = predknn1, prop.chisq = FALSE)
confusionMatrix(predknn1, data.test.l, positive = "positive")
confusionMatrix(predknn1, data.test_n, positive = "positive")
confusionMatrix(x = data.test.l, y = predknn1, prop.chisq = FALSE)
confusionMatrix(predknn1, data.test$class, positive = "positive")
confusionMatrix(table(predknn1, data.test.l))
confusionMatrix(table(predknn3, data.test.l))
confusionMatrix(table(predknn5, data.test.l))
confusionMatrix(table(predknn7, data.test.l))
confusionMatrix(table(predknn11, data.test.l))
ACUknn1 <- predknn1 == data.test$class
tabla1 <- data.frame(prop.table(table(ACUknn1)))
ACUknn1_1 <- tabla1$Freq[2]
SEN1_1 <- sensitivity(data.test$class, predknn1)
SPE1_1 <- specificity(data.test$class, predknn1)
ACUknn3 <- predknn3 == data.test$class
tabla1_3 <- data.frame(prop.table(table(ACUknn3)))
ACUknn1_3 <- tabla1_3$Freq[2]
SEN1_3 <- sensitivity(data.test$class, predknn3)
SPE1_3 <- specificity(data.test$class, predknn3)
ACUknn5 <- predknn5 == data.test$class
tabla1_5 <- data.frame(prop.table(table(ACUknn5)))
ACUknn1_5 <- tabla1_5$Freq[2]
SEN1_5 <- sensitivity(data.test$class, predknn5)
SPE1_5 <- specificity(data.test$class, predknn5)
ACUknn7 <- predknn7 == data.test$class
tabla1_7 <- data.frame(prop.table(table(ACUknn7)))
ACUknn1_7 <- tabla1_7$Freq[2]
SEN1_7 <- sensitivity(data.test$class, predknn7)
SPE1_7 <- specificity(data.test$class, predknn7)
ACUknn11 <- predknn11 == data.test$class
tabla1_11 <- data.frame(prop.table(table(ACUknn11)))
ACUknn1_11 <- tabla1_11$Freq[2]
SEN1_11 <- sensitivity(data.test$class, predknn11)
SPE1_11 <- specificity(data.test$class, predknn11)
mknn <- list(KNN = c(1, 3, 5, 7, 11), ACCURACY = c(ACUknn1_1, ACUknn1_3, ACUknn1_5, ACUknn1_7, ACUknn1_11), SENSITIVITY= c(SEN1_1, SEN1_3, SEN1_5, SEN1_7, SEN1_11), SPECIFICITY = c(SPE1_1, SPE1_3, SPE1_5, SPE1_7, SPE1_11))
data.frame(mknn)
modelnb <- naiveBayes(data.train[-9], data.train.l)
modelnb
modelnb1 <- naiveBayes(data.train[-9], data.train.l, laplace = 1)
modelnb1
prednb <- predict(modelnb, data.test)
CrossTable(prednb, data.test.l, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
confusionMatrix(prednb, data.test$class)
prednb1 <- predict(modelnb1, data.test)
CrossTable(prednb1, data.test.l, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c('predicted', 'actual'))
confusionMatrix(prednb1, data.test$class)
ACUnb <- prednb == data.test$class
tabla2 <- data.frame(prop.table(table(ACUnb)))
ACUnb <- tabla2$Freq[2]
SEN2 <- sensitivity(data.test$class, prednb)
SPE2 <- specificity(data.test$class, prednb)
ACUnb1 <- prednb1 == data.test$class
tabla2_1 <- data.frame(prop.table(table(ACUnb1)))
ACUnb1 <- tabla2_1$Freq[2]
SEN2_1 <- sensitivity(data.test$class, prednb1)
SPE2_1 <- specificity(data.test$class, prednb1)
mnb <- list(laplace = c(0, 1), ACCURACY = c(ACUnb, ACUnb1), SENSITIVITY= c(SEN2, SEN2_1), SPECIFICITY = c(SPE2, SPE2_1))
data.frame(mnb)
modelsvm <- ksvm(class ~ ., data = data.train, kernel = "vanilladot")
modelsvm
modelsvm1 <- ksvm(class ~ ., data = data.train, kernel = 'rbfdot')
modelsvm1
predsvm <- predict(modelsvm, data.test)
table(predsvm, data.test$class)
predsvm1 <- predict(modelsvm1, data.test)
table(predsvm1, data.test$class)
confusionMatrix(table(predsvm, data.test$class))
confusionMatrix(table(predsvm1, data.test$class))
ACU4 <- predsvm == data.test$class
tabla4 <- data.frame(prop.table(table(ACU4)))
ACU4 <- tabla4$Freq[2]
SEN4 <- sensitivity(data.test$class, predsvm)
SPE4 <- specificity(data.test$class, predsvm)
ACU4_1 <- predsvm1 == data.test$class
tabla4_1 <- data.frame(prop.table(table(ACU4_1)))
ACU4_1 <- tabla4_1$Freq[2]
SEN4_1 <- sensitivity(data.test$class, predsvm1)
SPE4_1 <- specificity(data.test$class, predsvm1)
msvm <- list(FUNCION = c('kernel', 'rbf'), ACCURACY = c(ACU4, ACU4_1), SENSITIVITY= c(SEN4, SEN4_1), SPECIFICITY = c(SPE4, SPE4_1))
data.frame(msvm)
modelad <- C5.0(data.train[-9], data.train$class)
modelad
summary(modelad)
plot(modelad)
adpred <- predict(modelad, data.test)
CrossTable(data.test$class, adpred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('diabetes actual', 'diabetes predicha'))
confusionMatrix(table(adpred, data.test$class))
adboost <- C5.0(data.train[-9], data.train$class, trials = 10)
adboost
confusionMatrix(table(adpredboost, data.test$class))
summary(adboost)
adpredboost <- predict(adboost, data.test)
CrossTable(data.test$class, adpredboost,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('diabetes actual', 'diabetes predicha'))
confusionMatrix(table(adpredboost, data.test$class))
ACUad <- adpredboost == data.test$class
tabla5 <- data.frame(prop.table(table(ACUad)))
ACU5 <- tabla5$Freq[2]
SEN5 <- sensitivity(data.test$class, adpredboost)
SPE <- specificity(data.test$class, adpredboost)
mad <- list(ACCURACY = ACU5, SENSITIVITY= SEN5, SPECIFICITY = SPE)
data.frame(mad)
modelrf1 <- randomForest(data.train[-9], data.train$class, ntree = 100)
modelrf1
modelrf2 <- randomForest(data.train[-9], data.train$class, ntree = 200)
modelrf2
predrf1 <- predict(modelrf1, data.test, type = "response")
predrf2 <- predict(modelrf2, data.test, type = "response")
ACUrf1 <- predrf1 == data.test$class
tabla61 <- data.frame(prop.table(table(ACUrf1)))
ACU61 <- tabla61$Freq[2]
SEN61 <- sensitivity(data.test$class, predrf1)
SPE61 <- specificity(data.test$class, predrf1)
mrf1 <- list(ACCURACY = ACU61, SENSITIVITY= SEN61, SPECIFICITY = SPE61)
data.frame(mrf1)
confusionMatrix(table(predrf1, data.test$class))
ACUrf1 <- predrf1 == data.test$class
tabla61 <- data.frame(prop.table(table(ACUrf1)))
ACU61 <- tabla61$Freq[2]
SEN61 <- sensitivity(data.test$class, predrf1)
SPE61 <- specificity(data.test$class, predrf1)
mrf1 <- list(ACCURACY = ACU61, SENSITIVITY= SEN61, SPECIFICITY = SPE61)
data.frame(mrf1)
confusionMatrix(table(predrf1, data.test$class))
ACUrf2 <- predrf2 == data.test$class
tabla62 <- data.frame(prop.table(table(ACUrf2)))
ACU62 <- tabla62$Freq[2]
SEN62 <- sensitivity(data.test$class, predrf2)
SPE62 <- specificity(data.test$class, predrf2)
mrf2 <- list(ACCURACY = ACU62, SENSITIVITY= SEN62, SPECIFICITY = SPE62)
data.frame(mrf2)
knitr::opts_chunk$set(echo = FALSE, comment = NULL, cache = TRUE, fig.width = 7, fig.height = 7, fig_caption = TRUE)
library(knitr)
library(ggseqlogo)
library(class)
library(gmodels)
library(ROCR)
library(pROC)
library(ggplot2)
library(C50)
library(caret)
library(randomForest)
library(e1071)
library(kernlab)
diabetes <- read.table("./pima_indians_diabetis.txt", header = TRUE)
head(diabetes)
set.seed(12345)
train<-sample(1:nrow(diabetes_n),round(0.67*nrow(diabetes_n)))
data.train_n <- diabetes_n[train, -9]
data.test_n <- diabetes_n[-train,-9]
data.train.l <- diabetes[train, 9]
data.test.l <- diabetes[-train, 9]
predknn1 <- knn(train = data.train_n, test = data.test_n, cl = data.train.l, k=1)
predknn3 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=3)
predknn5 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=5)
predknn7 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=7)
predknn11 <- knn(train =data.train_n, test = data.test_n, cl = data.train.l, k=11)
normalize <- function(x) {       return ((x - min(x)) / (max(x) - min(x))) }
diabetes_n<- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_n <- cbind(diabetes_n, class = diabetes$class)
head(diabetes_n)
